/* Write two functions that reverse the order of elements in a vector<int>. For
example, 1, 3, 5, 7, 9 becomes 9, 7, 5, 3, 1. The first reverse function should
produce a new vector with the reversed sequence, leaving its original vector
unchanged. The other reverse function should reverse the elements of its vector
without using any other vectors (hint: swap). */

#include <vector>
#include <iostream>
#include <stdexcept>


using namespace std;

vector<int> create_reverse(vector<int> v) { //created a vector which is an integer called create_reverse shorterned to v
    vector<int> reverse; // int of the vector has a variable of reverse
    for (int i = v.size() - 1; i >= 0; --i) // maths bit
        reverse.push_back(v[i]);
    return reverse;
}

void reverse_this(vector<int>& v) {
    int mid = v.size() / 2;
    int end = v.size() - 1;
    for (int i = 0; i < mid; ++i)
        swap(v[i], v[end - i]);
}

int main(int argc, char const* argv[])
{
    vector<int> v(10000, 10000);
    try {

        for (int i = 0; i < 1000; ++i)
            reverse(v.begin(), v.end());
    }
    catch (runtime_error& e) {
        cout << e.what() << endl;
    }
    catch (...) {
        cout << "Exiting..." << endl;
    }
    return 0;
}
